package day6

import (
	"fmt"
	//"github.com/soulsteel/aoc-2019-golang/utils"
)

func GetResults() (int, int) {
	input := []int{3,4,3,1,2}
	//input := []int{1,1,3,5,3,1,1,4,1,1,5,2,4,3,1,1,3,1,1,5,5,1,3,2,5,4,1,1,5,1,4,2,1,4,2,1,4,4,1,5,1,4,4,1,1,5,1,5,1,5,
	//	1,1,1,5,1,2,5,1,1,3,2,2,2,1,4,1,1,2,4,1,3,1,2,1,3,5,2,3,5,1,1,4,3,3,5,1,5,3,1,2,3,4,1,1,5,4,1,3,4,4,1,2,4,4,1,1,
	//	3,5,3,1,2,2,5,1,4,1,3,3,3,3,1,1,2,1,5,3,4,5,1,5,2,5,3,2,1,4,2,1,1,1,4,1,2,1,2,2,4,5,5,5,4,1,4,1,4,2,3,2,3,1,1,2,
	//	3,1,1,1,5,2,2,5,3,1,4,1,2,1,1,5,3,1,4,5,1,4,2,1,1,5,1,5,4,1,5,5,2,3,1,3,5,1,1,1,1,3,1,1,4,1,5,2,1,1,3,5,1,1,4,2,
	//	1,2,5,2,5,1,1,1,2,3,5,5,1,4,3,2,2,3,2,1,1,4,1,3,5,2,3,1,1,5,1,3,5,1,1,5,5,3,1,3,3,1,2,3,1,5,1,3,2,1,3,1,1,2,3,5,
	//	3,5,5,4,3,1,5,1,1,2,3,2,2,1,1,2,1,4,1,2,3,3,3,1,3,5}
	//res := countLanternfish(input, 0)
	//fmt.Println(res)

	fmt.Println(lant(input, 11))

	return 0,0
}

/*

{
	0: 3,
	1: 2,
	2: 3,
	3: 3,
	4: 3
}

3, 	4, 	3, 	1, 	2			5

2, 	3, 	2, 	0, 	1			5

1,	2, 	1, 	6,  0			6	1, 2, 1, 6, 0, 8

0, 	1, 	0, 	5,  6			7	0, 1, 0, 5, 6, 7, 8

6,  0, 	6,  4,  5			9   6, 0, 6, 4, 5, 6, 7, 8, 8

5,  6,  5,  3,  4			10  5, 6, 5, 3, 4, 5, 6, 7, 7, 8

4,  5,  4,  2,  3			10	4, 5, 4, 2, 3, 4, 5, 6, 6, 7

3,  4,  3,  1,  2			10	3, 4, 3, 1, 2, 3, 4, 5, 5, 6

2,  3,  2,  0,  1			10	2, 3, 2, 0, 1, 2, 3, 4, 4, 5

1,  2,  1,  6,  0			11	1, 2, 1, 6, 0, 1, 2, 3, 3, 4, 8

0,  1,  0,  5,  6			12	0, 1, 0, 5, 6, 0, 1, 2, 2, 3, 7, 8

6,  0,  6,  4,  5			14  6, 0, 6, 4, 5, 6, 0, 1, 1, 2, 6, 7, 8, 8, 8

5, -1, 	5,	3,	4			15  5, 6, 5, 3, 4, 5, 6, 0, 0, 1, 5, 6, 7, 7, 7, 8, 8
*/

func countLanternfish(initial *[]int, day int) int {
	if day == 256 {
		return len(*initial)
	}

	//next := make([]int, len(initial))
	//copy(next, initial)
	for i, v := range *initial {
		if v == 0 {
			*initial = append(*initial, 8)
			(*initial)[i] = 6
		} else {
			(*initial)[i] = (*initial)[i] - 1
		}
	}

	return countLanternfish(initial, day+1)
}

func lant(fishes []int, limit int) (count int) {
	scores := make(map[int]int)

	for i, _ := range fishes {
		scores[i] = 1
	}

	for j := 0; j < limit; j++ {
		for i, _ := range fishes {
			fishes[i] -= 1
		}

		for i, v := range fishes {
			if v == -1 {
				scores[i] += 1
				fishes[i] = 6
			}
		}
		fmt.Println("fishes", fishes)
		fmt.Println("scores", scores)
	}

	for _, v := range scores {
		count += v
	}

	return count
}


/*
1L: 	1  8  15 22 29 ...
8L: 	10 17 24 31 ...
15L: 	24 31 26 33 ...
17L:    28 35 ...
22L:	31 38 ...
24L:    33 40 ...
26L:    35 ...

==================================
0: 		0
1: 		6 8 (*)
2: 		5 7
3:		4 6
4:		3 5
5:		2 4
6:		1 3
7:		0 2
8:		6 1 8 (*)
9:		5 0 7
10:		4 6 6 8 (*)
11:		3 5 5 7
12:		2 4 4 6
13:		1 3 3 5
14:		0 2 2 4
15:		6 1 1 3 8 (*)
16:		5 0 0 2 7
17:		4 6 6 1 6 8 8 (* *)
18:		3 5 5 0 5 7 7
19:		2 4 4 6 4 7 7 8 (*)
20:		1 3 3 5 3 6 6 7
21:		0 2 2 4 2 5 5 6
22:		6 1 1 3 1 4 4 5 8 (*)
23:		5 0 0 2 0 3 3 4 7
24:		4 6 6 1 6 2 2 3 6 8 8 8 (* * *)
25:		3 5 5 0 5 1 1 2 5 7 7 7
26:		2 4 4 6 4 0 0 1 4 6 6 6 8 (*)
27:		1 3 3 5 3 6 6 0 3 5 5 5 7 8 8 (* *)
28:		0 2 2 4 2 5 5 6 2 4 4 4 6 7 7 8 (*)
29:		6 1 1 3 1 4 4 5 1 3 3 3 5 6 6 7 8 (*)
30:		5 0 0 2 0 3 3 4 0 2 2 2 4 5 5 6 7
31:     4 6 6 1 6 2 2 3 6 1 1 1 3 4 4 5 6 8 8 8 8 (* * * *)
32:		3 5 5 0 5 1 1 2 5 0 0 0 2 3 3 4 5 7 7 7 7
33:     2 4 4 6           6 6 6					6 8 8 8 8 (* * * *)
*/

func calcCell(start int, limit int) int {
	counter := 0
	for i := 1; i <= start; i++ {
		start--
		counter++
		if counter == limit {
			return 1
		}
	}

	firstCell := make([]int, 0)
	for i := 1; i < limit; i++ {
		if (i-1)%7 == 0 {
			firstCell = append(firstCell, i)
		}
	}

	tree := make([]int, 0)
	for i := 1; i < limit; i+= 7 {
		tree = append(tree, i)
		tree = append(tree, i)
	}

	return 0
}